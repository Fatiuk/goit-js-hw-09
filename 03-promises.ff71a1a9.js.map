{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAuBC,SAASC,cAAc,SAEpD,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAoBPL,EAAqBa,iBAAiB,UAAU,SAAAC,GAC9CA,EAAMC,iBAEN,IAAIV,EAAQW,SAAShB,EAAqBiB,SAASZ,MAAMa,OACnDC,EAAOH,SAAShB,EAAqBiB,SAASE,KAAKD,OACnDE,EAASJ,SAAShB,EAAqBiB,SAASG,OAAOF,OAGzDb,EAAQ,GAAKc,EAAO,GAAKC,EAAS,EACpCC,EAAAvB,GAASwB,OAAOC,QAAQ,mDAzB5B,SAA4BlB,EAAOc,EAAMC,EAAQhB,GAC/C,KAAeA,EAAWgB,EAAQhB,GAAY,EAC5CD,EAAcC,EAAW,EAAGC,EAAQD,EAAWe,GAC5CK,MAAK,SAAAC,G,IAAGC,EAAQD,EAARrB,SAAUuB,EAAKF,EAALpB,MACjBgB,EAAAvB,GAASwB,OAAOM,QACd,uBAAwCC,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAGjDG,OAAM,SAAAL,G,IAAGC,EAAQD,EAARrB,SAAUuB,EAAKF,EAALpB,MAClBgB,EAAAvB,GAASwB,OAAOS,QACd,sBAAuCF,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAgB9CK,CAAmB3B,EAAOc,EAAMC,EAJxB,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Additional import alert\nimport Notiflix from 'notiflix';\n\nconst promiseGeneratorForm = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromiseGenerator(delay, step, amount, position) {\n  for (position; position < amount; position += 1) {\n    createPromise(position + 1, delay + position * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\npromiseGeneratorForm.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let delay = parseInt(promiseGeneratorForm.elements.delay.value);\n  const step = parseInt(promiseGeneratorForm.elements.step.value);\n  const amount = parseInt(promiseGeneratorForm.elements.amount.value);\n  let position = 0;\n\n  if (delay < 0 && step < 0 && amount < 0) {\n    Notiflix.Notify.warning('⚠️ The form should contain only positive values');\n  } else onPromiseGenerator(delay, step, amount, position);\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$promiseGeneratorForm","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","parseInt","elements","value","step","amount","$parcel$interopDefault","Notify","warning","then","param","_$position","_$delay","success","concat","catch","failure","$ce04d3a99e08e73b$var$onPromiseGenerator"],"version":3,"file":"03-promises.ff71a1a9.js.map"}